import {resolve} from 'path'
import {type Plugin} from 'vite'
import fs from 'fs'

type Options = {
	locales?: string[]
	localesDir?: string
	defaultLocale?: string
}

const c = (...args) => console.log('vite i18n', ...args) || args[0]

export function i18nPlugin(options: Options = {}): Plugin {
	const {localesDir = 'i18n'} = options
	let {locales, defaultLocale} = options
	if (!locales?.length) locales = ['en']
	if (!defaultLocale) defaultLocale = locales[0]
	const localesDirAbs = resolve(process.cwd(), localesDir)
	c({locales, localesDirAbs, defaultLocale})

	return {
		name: 'i18n',
		enforce: 'pre',
		configResolved(config) {
			console.log('entries', config.build)
		},
		buildEnd(...args) {
			console.log('buildEnd', args)
		},
		buildStart(options) {
			console.log('buildStart', options)
			// Ensure the locales dir exists
			fs.mkdirSync(localesDirAbs, {recursive: true})
			// Generate the locale files
			for (const locale of locales!) {
				const match = /^([a-z]{2})([_-]([A-Z]{2}))?$/.exec(locale)
				if (!match)
					throw new Error(
						`Invalid locale: ${locale} (does not match xx or xx_XX))`
					)
				const localeFile = resolve(localesDirAbs, `${locale}.json`)
				if (!fs.existsSync(localeFile)) {
					fs.writeFileSync(
						localeFile,
						JSON.stringify(
							{
								locale,
								name: match[3] ? `${match[1]} (${match[3]})` : locale,
								translations: {},
							},
							null,
							2
						)
					)
				}
			}
		},
		async resolveId(id, importer) {
			if (c(id, 'resolveId', importer).endsWith('/i18n/__locales.js'))
				return '\0i18n-locales.js'
			// console.log('resolveId', id, importer, await this.getModuleInfo(id))
		},
		async load(id) {
			// console.log('load', id, await this.getModuleInfo(id))
			if (id === '\0i18n-locales.js') {
				return `
/**
 * This file was generated by vite-plugin-i18n.
 *
 * For server builds, it contains all translations. For client builds, it is
 * empty, and translations need to be loaded dynamically.
 */
${locales!
	.map(l => `export {default as ${l}} from '${localesDirAbs}/${l}.json'`)
	.join('\n')}
`
			}
		},
		async transform(code, id) {
			console.log('transform', id, await this.getModuleInfo(id))
			// if (id.endsWith('.js')) {
			// 	// Apply flavor-specific transformations here
			// 	const transformedCode = code.replace(
			// 		'$localize',
			// 		'/* flavor: $localize */'
			// 	)
			// 	return {
			// 		code: transformedCode,
			// 		map: null, // You might need to handle source maps
			// 	}
			// }
			return null
		},
		// resolveId(source, importer) {
		// 	// Resolve flavor imports to their corresponding plain IDs
		// 	if (source.startsWith('\0')) {
		// 		const [flavor, plainId] = source.slice(1).split('-')
		// 		return this.resolve(plainId, importer, {skipSelf: true}).then(
		// 			resolved => {
		// 				return {
		// 					id: `\0${flavor}-${resolved.id}`,
		// 					external: true, // Ensure Vite doesn't try to bundle this import
		// 				}
		// 			}
		// 		)
		// 	}
		// 	return null
		// },
	}
}
